// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `details.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:dmzj.comic.ComicDetailResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ComicDetailResponse {
    // message fields
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailResponse.Errno)
    pub Errno: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailResponse.Errmsg)
    pub Errmsg: ::std::string::String,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailResponse.Data)
    pub Data: ::protobuf::MessageField<ComicDetailInfoResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:dmzj.comic.ComicDetailResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ComicDetailResponse {
    fn default() -> &'a ComicDetailResponse {
        <ComicDetailResponse as ::protobuf::Message>::default_instance()
    }
}

impl ComicDetailResponse {
    pub fn new() -> ComicDetailResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Errno",
            |m: &ComicDetailResponse| { &m.Errno },
            |m: &mut ComicDetailResponse| { &mut m.Errno },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Errmsg",
            |m: &ComicDetailResponse| { &m.Errmsg },
            |m: &mut ComicDetailResponse| { &mut m.Errmsg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ComicDetailInfoResponse>(
            "Data",
            |m: &ComicDetailResponse| { &m.Data },
            |m: &mut ComicDetailResponse| { &mut m.Data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ComicDetailResponse>(
            "ComicDetailResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ComicDetailResponse {
    const NAME: &'static str = "ComicDetailResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.Errno = is.read_int32()?;
                },
                18 => {
                    self.Errmsg = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.Data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.Errno != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.Errno);
        }
        if !self.Errmsg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Errmsg);
        }
        if let Some(v) = self.Data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.Errno != 0 {
            os.write_int32(1, self.Errno)?;
        }
        if !self.Errmsg.is_empty() {
            os.write_string(2, &self.Errmsg)?;
        }
        if let Some(v) = self.Data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ComicDetailResponse {
        ComicDetailResponse::new()
    }

    fn clear(&mut self) {
        self.Errno = 0;
        self.Errmsg.clear();
        self.Data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ComicDetailResponse {
        static instance: ComicDetailResponse = ComicDetailResponse {
            Errno: 0,
            Errmsg: ::std::string::String::new(),
            Data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ComicDetailResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ComicDetailResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ComicDetailResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComicDetailResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dmzj.comic.ComicDetailInfoResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ComicDetailInfoResponse {
    // message fields
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Id)
    pub Id: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Title)
    pub Title: ::std::string::String,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Direction)
    pub Direction: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Islong)
    pub Islong: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.IsDmzj)
    pub IsDmzj: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Cover)
    pub Cover: ::std::string::String,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Description)
    pub Description: ::std::string::String,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.LastUpdatetime)
    pub LastUpdatetime: i64,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.LastUpdateChapterName)
    pub LastUpdateChapterName: ::std::string::String,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Copyright)
    pub Copyright: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.FirstLetter)
    pub FirstLetter: ::std::string::String,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.ComicPy)
    pub ComicPy: ::std::string::String,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Hidden)
    pub Hidden: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.HotNum)
    pub HotNum: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.HitNum)
    pub HitNum: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Uid)
    pub Uid: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.IsLock)
    pub IsLock: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.LastUpdateChapterId)
    pub LastUpdateChapterId: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Types)
    pub Types: ::std::vec::Vec<ComicDetailTypeItemResponse>,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Status)
    pub Status: ::std::vec::Vec<ComicDetailTypeItemResponse>,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Authors)
    pub Authors: ::std::vec::Vec<ComicDetailTypeItemResponse>,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.SubscribeNum)
    pub SubscribeNum: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.Chapters)
    pub Chapters: ::std::vec::Vec<ComicDetailChapterResponse>,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.IsNeedLogin)
    pub IsNeedLogin: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailInfoResponse.IsHideChapter)
    pub IsHideChapter: i32,
    // special fields
    // @@protoc_insertion_point(special_field:dmzj.comic.ComicDetailInfoResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ComicDetailInfoResponse {
    fn default() -> &'a ComicDetailInfoResponse {
        <ComicDetailInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl ComicDetailInfoResponse {
    pub fn new() -> ComicDetailInfoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(25);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Id",
            |m: &ComicDetailInfoResponse| { &m.Id },
            |m: &mut ComicDetailInfoResponse| { &mut m.Id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Title",
            |m: &ComicDetailInfoResponse| { &m.Title },
            |m: &mut ComicDetailInfoResponse| { &mut m.Title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Direction",
            |m: &ComicDetailInfoResponse| { &m.Direction },
            |m: &mut ComicDetailInfoResponse| { &mut m.Direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Islong",
            |m: &ComicDetailInfoResponse| { &m.Islong },
            |m: &mut ComicDetailInfoResponse| { &mut m.Islong },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IsDmzj",
            |m: &ComicDetailInfoResponse| { &m.IsDmzj },
            |m: &mut ComicDetailInfoResponse| { &mut m.IsDmzj },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Cover",
            |m: &ComicDetailInfoResponse| { &m.Cover },
            |m: &mut ComicDetailInfoResponse| { &mut m.Cover },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Description",
            |m: &ComicDetailInfoResponse| { &m.Description },
            |m: &mut ComicDetailInfoResponse| { &mut m.Description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LastUpdatetime",
            |m: &ComicDetailInfoResponse| { &m.LastUpdatetime },
            |m: &mut ComicDetailInfoResponse| { &mut m.LastUpdatetime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LastUpdateChapterName",
            |m: &ComicDetailInfoResponse| { &m.LastUpdateChapterName },
            |m: &mut ComicDetailInfoResponse| { &mut m.LastUpdateChapterName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Copyright",
            |m: &ComicDetailInfoResponse| { &m.Copyright },
            |m: &mut ComicDetailInfoResponse| { &mut m.Copyright },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FirstLetter",
            |m: &ComicDetailInfoResponse| { &m.FirstLetter },
            |m: &mut ComicDetailInfoResponse| { &mut m.FirstLetter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ComicPy",
            |m: &ComicDetailInfoResponse| { &m.ComicPy },
            |m: &mut ComicDetailInfoResponse| { &mut m.ComicPy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Hidden",
            |m: &ComicDetailInfoResponse| { &m.Hidden },
            |m: &mut ComicDetailInfoResponse| { &mut m.Hidden },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HotNum",
            |m: &ComicDetailInfoResponse| { &m.HotNum },
            |m: &mut ComicDetailInfoResponse| { &mut m.HotNum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "HitNum",
            |m: &ComicDetailInfoResponse| { &m.HitNum },
            |m: &mut ComicDetailInfoResponse| { &mut m.HitNum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Uid",
            |m: &ComicDetailInfoResponse| { &m.Uid },
            |m: &mut ComicDetailInfoResponse| { &mut m.Uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IsLock",
            |m: &ComicDetailInfoResponse| { &m.IsLock },
            |m: &mut ComicDetailInfoResponse| { &mut m.IsLock },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "LastUpdateChapterId",
            |m: &ComicDetailInfoResponse| { &m.LastUpdateChapterId },
            |m: &mut ComicDetailInfoResponse| { &mut m.LastUpdateChapterId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "Types",
            |m: &ComicDetailInfoResponse| { &m.Types },
            |m: &mut ComicDetailInfoResponse| { &mut m.Types },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "Status",
            |m: &ComicDetailInfoResponse| { &m.Status },
            |m: &mut ComicDetailInfoResponse| { &mut m.Status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "Authors",
            |m: &ComicDetailInfoResponse| { &m.Authors },
            |m: &mut ComicDetailInfoResponse| { &mut m.Authors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SubscribeNum",
            |m: &ComicDetailInfoResponse| { &m.SubscribeNum },
            |m: &mut ComicDetailInfoResponse| { &mut m.SubscribeNum },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "Chapters",
            |m: &ComicDetailInfoResponse| { &m.Chapters },
            |m: &mut ComicDetailInfoResponse| { &mut m.Chapters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IsNeedLogin",
            |m: &ComicDetailInfoResponse| { &m.IsNeedLogin },
            |m: &mut ComicDetailInfoResponse| { &mut m.IsNeedLogin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IsHideChapter",
            |m: &ComicDetailInfoResponse| { &m.IsHideChapter },
            |m: &mut ComicDetailInfoResponse| { &mut m.IsHideChapter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ComicDetailInfoResponse>(
            "ComicDetailInfoResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ComicDetailInfoResponse {
    const NAME: &'static str = "ComicDetailInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.Id = is.read_int32()?;
                },
                18 => {
                    self.Title = is.read_string()?;
                },
                24 => {
                    self.Direction = is.read_int32()?;
                },
                32 => {
                    self.Islong = is.read_int32()?;
                },
                40 => {
                    self.IsDmzj = is.read_int32()?;
                },
                50 => {
                    self.Cover = is.read_string()?;
                },
                58 => {
                    self.Description = is.read_string()?;
                },
                64 => {
                    self.LastUpdatetime = is.read_int64()?;
                },
                74 => {
                    self.LastUpdateChapterName = is.read_string()?;
                },
                80 => {
                    self.Copyright = is.read_int32()?;
                },
                90 => {
                    self.FirstLetter = is.read_string()?;
                },
                98 => {
                    self.ComicPy = is.read_string()?;
                },
                104 => {
                    self.Hidden = is.read_int32()?;
                },
                112 => {
                    self.HotNum = is.read_int32()?;
                },
                120 => {
                    self.HitNum = is.read_int32()?;
                },
                128 => {
                    self.Uid = is.read_int32()?;
                },
                136 => {
                    self.IsLock = is.read_int32()?;
                },
                144 => {
                    self.LastUpdateChapterId = is.read_int32()?;
                },
                154 => {
                    self.Types.push(is.read_message()?);
                },
                162 => {
                    self.Status.push(is.read_message()?);
                },
                170 => {
                    self.Authors.push(is.read_message()?);
                },
                176 => {
                    self.SubscribeNum = is.read_int32()?;
                },
                186 => {
                    self.Chapters.push(is.read_message()?);
                },
                192 => {
                    self.IsNeedLogin = is.read_int32()?;
                },
                208 => {
                    self.IsHideChapter = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.Id != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.Id);
        }
        if !self.Title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Title);
        }
        if self.Direction != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.Direction);
        }
        if self.Islong != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.Islong);
        }
        if self.IsDmzj != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.IsDmzj);
        }
        if !self.Cover.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.Cover);
        }
        if !self.Description.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.Description);
        }
        if self.LastUpdatetime != 0 {
            my_size += ::protobuf::rt::int64_size(8, self.LastUpdatetime);
        }
        if !self.LastUpdateChapterName.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.LastUpdateChapterName);
        }
        if self.Copyright != 0 {
            my_size += ::protobuf::rt::int32_size(10, self.Copyright);
        }
        if !self.FirstLetter.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.FirstLetter);
        }
        if !self.ComicPy.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.ComicPy);
        }
        if self.Hidden != 0 {
            my_size += ::protobuf::rt::int32_size(13, self.Hidden);
        }
        if self.HotNum != 0 {
            my_size += ::protobuf::rt::int32_size(14, self.HotNum);
        }
        if self.HitNum != 0 {
            my_size += ::protobuf::rt::int32_size(15, self.HitNum);
        }
        if self.Uid != 0 {
            my_size += ::protobuf::rt::int32_size(16, self.Uid);
        }
        if self.IsLock != 0 {
            my_size += ::protobuf::rt::int32_size(17, self.IsLock);
        }
        if self.LastUpdateChapterId != 0 {
            my_size += ::protobuf::rt::int32_size(18, self.LastUpdateChapterId);
        }
        for value in &self.Types {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.Status {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.Authors {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.SubscribeNum != 0 {
            my_size += ::protobuf::rt::int32_size(22, self.SubscribeNum);
        }
        for value in &self.Chapters {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.IsNeedLogin != 0 {
            my_size += ::protobuf::rt::int32_size(24, self.IsNeedLogin);
        }
        if self.IsHideChapter != 0 {
            my_size += ::protobuf::rt::int32_size(26, self.IsHideChapter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.Id != 0 {
            os.write_int32(1, self.Id)?;
        }
        if !self.Title.is_empty() {
            os.write_string(2, &self.Title)?;
        }
        if self.Direction != 0 {
            os.write_int32(3, self.Direction)?;
        }
        if self.Islong != 0 {
            os.write_int32(4, self.Islong)?;
        }
        if self.IsDmzj != 0 {
            os.write_int32(5, self.IsDmzj)?;
        }
        if !self.Cover.is_empty() {
            os.write_string(6, &self.Cover)?;
        }
        if !self.Description.is_empty() {
            os.write_string(7, &self.Description)?;
        }
        if self.LastUpdatetime != 0 {
            os.write_int64(8, self.LastUpdatetime)?;
        }
        if !self.LastUpdateChapterName.is_empty() {
            os.write_string(9, &self.LastUpdateChapterName)?;
        }
        if self.Copyright != 0 {
            os.write_int32(10, self.Copyright)?;
        }
        if !self.FirstLetter.is_empty() {
            os.write_string(11, &self.FirstLetter)?;
        }
        if !self.ComicPy.is_empty() {
            os.write_string(12, &self.ComicPy)?;
        }
        if self.Hidden != 0 {
            os.write_int32(13, self.Hidden)?;
        }
        if self.HotNum != 0 {
            os.write_int32(14, self.HotNum)?;
        }
        if self.HitNum != 0 {
            os.write_int32(15, self.HitNum)?;
        }
        if self.Uid != 0 {
            os.write_int32(16, self.Uid)?;
        }
        if self.IsLock != 0 {
            os.write_int32(17, self.IsLock)?;
        }
        if self.LastUpdateChapterId != 0 {
            os.write_int32(18, self.LastUpdateChapterId)?;
        }
        for v in &self.Types {
            ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
        };
        for v in &self.Status {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        };
        for v in &self.Authors {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        };
        if self.SubscribeNum != 0 {
            os.write_int32(22, self.SubscribeNum)?;
        }
        for v in &self.Chapters {
            ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        };
        if self.IsNeedLogin != 0 {
            os.write_int32(24, self.IsNeedLogin)?;
        }
        if self.IsHideChapter != 0 {
            os.write_int32(26, self.IsHideChapter)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ComicDetailInfoResponse {
        ComicDetailInfoResponse::new()
    }

    fn clear(&mut self) {
        self.Id = 0;
        self.Title.clear();
        self.Direction = 0;
        self.Islong = 0;
        self.IsDmzj = 0;
        self.Cover.clear();
        self.Description.clear();
        self.LastUpdatetime = 0;
        self.LastUpdateChapterName.clear();
        self.Copyright = 0;
        self.FirstLetter.clear();
        self.ComicPy.clear();
        self.Hidden = 0;
        self.HotNum = 0;
        self.HitNum = 0;
        self.Uid = 0;
        self.IsLock = 0;
        self.LastUpdateChapterId = 0;
        self.Types.clear();
        self.Status.clear();
        self.Authors.clear();
        self.SubscribeNum = 0;
        self.Chapters.clear();
        self.IsNeedLogin = 0;
        self.IsHideChapter = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ComicDetailInfoResponse {
        static instance: ComicDetailInfoResponse = ComicDetailInfoResponse {
            Id: 0,
            Title: ::std::string::String::new(),
            Direction: 0,
            Islong: 0,
            IsDmzj: 0,
            Cover: ::std::string::String::new(),
            Description: ::std::string::String::new(),
            LastUpdatetime: 0,
            LastUpdateChapterName: ::std::string::String::new(),
            Copyright: 0,
            FirstLetter: ::std::string::String::new(),
            ComicPy: ::std::string::String::new(),
            Hidden: 0,
            HotNum: 0,
            HitNum: 0,
            Uid: 0,
            IsLock: 0,
            LastUpdateChapterId: 0,
            Types: ::std::vec::Vec::new(),
            Status: ::std::vec::Vec::new(),
            Authors: ::std::vec::Vec::new(),
            SubscribeNum: 0,
            Chapters: ::std::vec::Vec::new(),
            IsNeedLogin: 0,
            IsHideChapter: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ComicDetailInfoResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ComicDetailInfoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ComicDetailInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComicDetailInfoResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dmzj.comic.ComicDetailTypeItemResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ComicDetailTypeItemResponse {
    // message fields
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailTypeItemResponse.TagId)
    pub TagId: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailTypeItemResponse.TagName)
    pub TagName: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:dmzj.comic.ComicDetailTypeItemResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ComicDetailTypeItemResponse {
    fn default() -> &'a ComicDetailTypeItemResponse {
        <ComicDetailTypeItemResponse as ::protobuf::Message>::default_instance()
    }
}

impl ComicDetailTypeItemResponse {
    pub fn new() -> ComicDetailTypeItemResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "TagId",
            |m: &ComicDetailTypeItemResponse| { &m.TagId },
            |m: &mut ComicDetailTypeItemResponse| { &mut m.TagId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "TagName",
            |m: &ComicDetailTypeItemResponse| { &m.TagName },
            |m: &mut ComicDetailTypeItemResponse| { &mut m.TagName },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ComicDetailTypeItemResponse>(
            "ComicDetailTypeItemResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ComicDetailTypeItemResponse {
    const NAME: &'static str = "ComicDetailTypeItemResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.TagId = is.read_int32()?;
                },
                18 => {
                    self.TagName = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.TagId != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.TagId);
        }
        if !self.TagName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.TagName);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.TagId != 0 {
            os.write_int32(1, self.TagId)?;
        }
        if !self.TagName.is_empty() {
            os.write_string(2, &self.TagName)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ComicDetailTypeItemResponse {
        ComicDetailTypeItemResponse::new()
    }

    fn clear(&mut self) {
        self.TagId = 0;
        self.TagName.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ComicDetailTypeItemResponse {
        static instance: ComicDetailTypeItemResponse = ComicDetailTypeItemResponse {
            TagId: 0,
            TagName: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ComicDetailTypeItemResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ComicDetailTypeItemResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ComicDetailTypeItemResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComicDetailTypeItemResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dmzj.comic.ComicDetailChapterResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ComicDetailChapterResponse {
    // message fields
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailChapterResponse.Title)
    pub Title: ::std::string::String,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailChapterResponse.Data)
    pub Data: ::std::vec::Vec<ComicDetailChapterInfoResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:dmzj.comic.ComicDetailChapterResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ComicDetailChapterResponse {
    fn default() -> &'a ComicDetailChapterResponse {
        <ComicDetailChapterResponse as ::protobuf::Message>::default_instance()
    }
}

impl ComicDetailChapterResponse {
    pub fn new() -> ComicDetailChapterResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Title",
            |m: &ComicDetailChapterResponse| { &m.Title },
            |m: &mut ComicDetailChapterResponse| { &mut m.Title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "Data",
            |m: &ComicDetailChapterResponse| { &m.Data },
            |m: &mut ComicDetailChapterResponse| { &mut m.Data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ComicDetailChapterResponse>(
            "ComicDetailChapterResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ComicDetailChapterResponse {
    const NAME: &'static str = "ComicDetailChapterResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.Title = is.read_string()?;
                },
                18 => {
                    self.Data.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Title);
        }
        for value in &self.Data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Title.is_empty() {
            os.write_string(1, &self.Title)?;
        }
        for v in &self.Data {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ComicDetailChapterResponse {
        ComicDetailChapterResponse::new()
    }

    fn clear(&mut self) {
        self.Title.clear();
        self.Data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ComicDetailChapterResponse {
        static instance: ComicDetailChapterResponse = ComicDetailChapterResponse {
            Title: ::std::string::String::new(),
            Data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ComicDetailChapterResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ComicDetailChapterResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ComicDetailChapterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComicDetailChapterResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dmzj.comic.ComicDetailChapterInfoResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ComicDetailChapterInfoResponse {
    // message fields
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailChapterInfoResponse.ChapterId)
    pub ChapterId: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailChapterInfoResponse.ChapterTitle)
    pub ChapterTitle: ::std::string::String,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailChapterInfoResponse.Updatetime)
    pub Updatetime: i64,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailChapterInfoResponse.Filesize)
    pub Filesize: i32,
    // @@protoc_insertion_point(field:dmzj.comic.ComicDetailChapterInfoResponse.ChapterOrder)
    pub ChapterOrder: i32,
    // special fields
    // @@protoc_insertion_point(special_field:dmzj.comic.ComicDetailChapterInfoResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ComicDetailChapterInfoResponse {
    fn default() -> &'a ComicDetailChapterInfoResponse {
        <ComicDetailChapterInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl ComicDetailChapterInfoResponse {
    pub fn new() -> ComicDetailChapterInfoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ChapterId",
            |m: &ComicDetailChapterInfoResponse| { &m.ChapterId },
            |m: &mut ComicDetailChapterInfoResponse| { &mut m.ChapterId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ChapterTitle",
            |m: &ComicDetailChapterInfoResponse| { &m.ChapterTitle },
            |m: &mut ComicDetailChapterInfoResponse| { &mut m.ChapterTitle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Updatetime",
            |m: &ComicDetailChapterInfoResponse| { &m.Updatetime },
            |m: &mut ComicDetailChapterInfoResponse| { &mut m.Updatetime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Filesize",
            |m: &ComicDetailChapterInfoResponse| { &m.Filesize },
            |m: &mut ComicDetailChapterInfoResponse| { &mut m.Filesize },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ChapterOrder",
            |m: &ComicDetailChapterInfoResponse| { &m.ChapterOrder },
            |m: &mut ComicDetailChapterInfoResponse| { &mut m.ChapterOrder },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ComicDetailChapterInfoResponse>(
            "ComicDetailChapterInfoResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ComicDetailChapterInfoResponse {
    const NAME: &'static str = "ComicDetailChapterInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ChapterId = is.read_int32()?;
                },
                18 => {
                    self.ChapterTitle = is.read_string()?;
                },
                24 => {
                    self.Updatetime = is.read_int64()?;
                },
                32 => {
                    self.Filesize = is.read_int32()?;
                },
                40 => {
                    self.ChapterOrder = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ChapterId != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.ChapterId);
        }
        if !self.ChapterTitle.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ChapterTitle);
        }
        if self.Updatetime != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.Updatetime);
        }
        if self.Filesize != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.Filesize);
        }
        if self.ChapterOrder != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.ChapterOrder);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ChapterId != 0 {
            os.write_int32(1, self.ChapterId)?;
        }
        if !self.ChapterTitle.is_empty() {
            os.write_string(2, &self.ChapterTitle)?;
        }
        if self.Updatetime != 0 {
            os.write_int64(3, self.Updatetime)?;
        }
        if self.Filesize != 0 {
            os.write_int32(4, self.Filesize)?;
        }
        if self.ChapterOrder != 0 {
            os.write_int32(5, self.ChapterOrder)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ComicDetailChapterInfoResponse {
        ComicDetailChapterInfoResponse::new()
    }

    fn clear(&mut self) {
        self.ChapterId = 0;
        self.ChapterTitle.clear();
        self.Updatetime = 0;
        self.Filesize = 0;
        self.ChapterOrder = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ComicDetailChapterInfoResponse {
        static instance: ComicDetailChapterInfoResponse = ComicDetailChapterInfoResponse {
            ChapterId: 0,
            ChapterTitle: ::std::string::String::new(),
            Updatetime: 0,
            Filesize: 0,
            ChapterOrder: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ComicDetailChapterInfoResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ComicDetailChapterInfoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ComicDetailChapterInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComicDetailChapterInfoResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rdetails.proto\x12\ndmzj.comic\"|\n\x13ComicDetailResponse\x12\x14\n\
    \x05Errno\x18\x01\x20\x01(\x05R\x05Errno\x12\x16\n\x06Errmsg\x18\x02\x20\
    \x01(\tR\x06Errmsg\x127\n\x04Data\x18\x03\x20\x01(\x0b2#.dmzj.comic.Comi\
    cDetailInfoResponseR\x04Data\"\x94\x07\n\x17ComicDetailInfoResponse\x12\
    \x0e\n\x02Id\x18\x01\x20\x01(\x05R\x02Id\x12\x14\n\x05Title\x18\x02\x20\
    \x01(\tR\x05Title\x12\x1c\n\tDirection\x18\x03\x20\x01(\x05R\tDirection\
    \x12\x16\n\x06Islong\x18\x04\x20\x01(\x05R\x06Islong\x12\x16\n\x06IsDmzj\
    \x18\x05\x20\x01(\x05R\x06IsDmzj\x12\x14\n\x05Cover\x18\x06\x20\x01(\tR\
    \x05Cover\x12\x20\n\x0bDescription\x18\x07\x20\x01(\tR\x0bDescription\
    \x12&\n\x0eLastUpdatetime\x18\x08\x20\x01(\x03R\x0eLastUpdatetime\x124\n\
    \x15LastUpdateChapterName\x18\t\x20\x01(\tR\x15LastUpdateChapterName\x12\
    \x1c\n\tCopyright\x18\n\x20\x01(\x05R\tCopyright\x12\x20\n\x0bFirstLette\
    r\x18\x0b\x20\x01(\tR\x0bFirstLetter\x12\x18\n\x07ComicPy\x18\x0c\x20\
    \x01(\tR\x07ComicPy\x12\x16\n\x06Hidden\x18\r\x20\x01(\x05R\x06Hidden\
    \x12\x16\n\x06HotNum\x18\x0e\x20\x01(\x05R\x06HotNum\x12\x16\n\x06HitNum\
    \x18\x0f\x20\x01(\x05R\x06HitNum\x12\x10\n\x03Uid\x18\x10\x20\x01(\x05R\
    \x03Uid\x12\x16\n\x06IsLock\x18\x11\x20\x01(\x05R\x06IsLock\x120\n\x13La\
    stUpdateChapterId\x18\x12\x20\x01(\x05R\x13LastUpdateChapterId\x12=\n\
    \x05Types\x18\x13\x20\x03(\x0b2'.dmzj.comic.ComicDetailTypeItemResponseR\
    \x05Types\x12?\n\x06Status\x18\x14\x20\x03(\x0b2'.dmzj.comic.ComicDetail\
    TypeItemResponseR\x06Status\x12A\n\x07Authors\x18\x15\x20\x03(\x0b2'.dmz\
    j.comic.ComicDetailTypeItemResponseR\x07Authors\x12\"\n\x0cSubscribeNum\
    \x18\x16\x20\x01(\x05R\x0cSubscribeNum\x12B\n\x08Chapters\x18\x17\x20\
    \x03(\x0b2&.dmzj.comic.ComicDetailChapterResponseR\x08Chapters\x12\x20\n\
    \x0bIsNeedLogin\x18\x18\x20\x01(\x05R\x0bIsNeedLogin\x12$\n\rIsHideChapt\
    er\x18\x1a\x20\x01(\x05R\rIsHideChapter\"M\n\x1bComicDetailTypeItemRespo\
    nse\x12\x14\n\x05TagId\x18\x01\x20\x01(\x05R\x05TagId\x12\x18\n\x07TagNa\
    me\x18\x02\x20\x01(\tR\x07TagName\"r\n\x1aComicDetailChapterResponse\x12\
    \x14\n\x05Title\x18\x01\x20\x01(\tR\x05Title\x12>\n\x04Data\x18\x02\x20\
    \x03(\x0b2*.dmzj.comic.ComicDetailChapterInfoResponseR\x04Data\"\xc2\x01\
    \n\x1eComicDetailChapterInfoResponse\x12\x1c\n\tChapterId\x18\x01\x20\
    \x01(\x05R\tChapterId\x12\"\n\x0cChapterTitle\x18\x02\x20\x01(\tR\x0cCha\
    pterTitle\x12\x1e\n\nUpdatetime\x18\x03\x20\x01(\x03R\nUpdatetime\x12\
    \x1a\n\x08Filesize\x18\x04\x20\x01(\x05R\x08Filesize\x12\"\n\x0cChapterO\
    rder\x18\x05\x20\x01(\x05R\x0cChapterOrderb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(ComicDetailResponse::generated_message_descriptor_data());
            messages.push(ComicDetailInfoResponse::generated_message_descriptor_data());
            messages.push(ComicDetailTypeItemResponse::generated_message_descriptor_data());
            messages.push(ComicDetailChapterResponse::generated_message_descriptor_data());
            messages.push(ComicDetailChapterInfoResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
